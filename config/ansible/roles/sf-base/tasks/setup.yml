---
- name: "sf: create basic directories"
  file: path={{ item }} state=directory mode=0755
  with_items:
    - /var/lib/software-factory
    - /etc/software-factory
    - /usr/share/software-factory
    - /usr/libexec/software-factory
    - /usr/share/software-factory

- name: "sf: create log directory"
  file: path=/var/log/software-factory state=directory mode=0700

- name: "system: manage sysctl"
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  with_items:
    - {name: net.ipv4.ip_forward, value: 0}
    - {name: net.ipv4.ip_dynaddr, value: 0}
    - {name: net.ipv4.tcp_ecn, value: 0}
    - {name: net.ipv4.conf.default.rp_filter, value: 1}
    - {name: net.ipv4.conf.all.rp_filter, value: 1}
    - {name: net.ipv4.tcp_syncookies, value: 1}
    - {name: net.ipv4.conf.all.accept_source_route, value: 0}
    - {name: net.ipv4.conf.default.accept_source_route, value: 0}
    - {name: net.ipv4.conf.all.accept_redirects, value: 0}
    - {name: net.ipv4.conf.default.accept_redirects, value: 0}
    - {name: net.ipv4.conf.all.secure_redirects, value: 0}
    - {name: net.ipv4.conf.default.secure_redirects, value: 0}
    - {name: net.ipv4.icmp_echo_ignore_broadcasts, value: 1}
    - {name: kernel.sysrq, value: 0}
  when: ansible_virtualization_role != "guest"

- name: "system: make sure auditd is enabled"
  systemd: name=auditd enabled=yes state=started
  when: ansible_virtualization_role != "guest"

- name: "system: manage /etc/hosts"
  template: src="{{ sf_templates_dir }}/etc-hosts.j2" dest=/etc/hosts mode=0644

- name: "system: remove unused ip address if present"
  known_hosts: name='[192.168.135.101]:29418' state=absent

- name: "system: remove unused localhost entry if present"
  known_hosts: name='[localhost]:29418' state=absent

- name: "system: disable root password login"
  user: name=root password="*"

- name: "system: remove requiretty from sudoers"
  lineinfile: dest=/etc/sudoers state=absent regexp="^Defaults.*requiretty"

- name: "system: set /etc/ssh/ssh_known_hosts for all inventory"
  template:
    src=global_known_hosts.j2
    dest=/etc/ssh/ssh_known_hosts
    owner=root group=root mode=0644

- name: "system: allow install-server to connect"
  authorized_key:
    user: root
    key: "{{ service_rsa_pub }}"

- name: "system: allow apache to connect database"
  seboolean: name={{ item }} state=yes persistent=yes
  when: ansible_selinux.status == "enabled"
  with_items:
    - httpd_can_network_connect
    - httpd_can_network_connect_db
    - logging_syslogd_can_sendmail

- name: "system: install wait4 scripts"
  copy: src={{ item }} dest=/usr/libexec/{{ item }} mode=0555
  with_items: [wait4port, wait4mariadb, wait4gerrit]

- name: "rsyslog: configure ommail (mail output module)"
  template: src=mail-ssh-login.j2 dest=/etc/rsyslog.d/mail-ssh-login.conf
  register: rsyslog_config

- name: "rsyslog: manage service"
  service: name=rsyslog state=restarted
  when: rsyslog_config|changed

- name: "auth: install pubkey.pem"
  copy:
      content: "{{ cauth_pubkey }}"
      dest: "/var/lib/cauth/keys/pubkey.pem"
      mode: 0444
      setype: httpd_sys_content_t

- name: "auth: install tkt apache module configuration"
  copy:
      content: "LoadModule auth_pubtkt_module modules/mod_auth_pubtkt.so\n"
      dest: /etc/httpd/conf.modules.d/00-tkt.conf
      mode: 0444

- name: "auth: install tkt apache pubtkt configuration"
  copy:
      content: "TKTAuthPublicKey /var/lib/cauth/keys/pubkey.pem\n"
      dest: /etc/httpd/conf.d/auth_pubtkt.conf
      mode: 0444

- name: "Set edeploy server ip address"
  lineinfile:
      dest: /var/lib/edeploy/conf
      regexp: ^RSERV=
      line: "RSERV={{ edeploy_server }}"

- name: "Set edeploy server port"
  lineinfile:
      dest: /var/lib/edeploy/conf
      regexp: ^RSERV_PORT=
      line: "RSERV_PORT={{ edeploy_service_port }}"

- name: "Set ntp server"
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  register: ntp_config

- name: "ntpd: manage service"
  service:
      name: ntpd
      enabled: true
      state: restarted
  when: ntp_config|changed

- name: "Add localCA to pki trust"
  copy:
      content: "{{ localCA_pem }}"
      dest: "/etc/pki/ca-trust/source/anchors/localCA.pem"
      mode: 0644
      owner: root
      group: root
  register: new_crt

- name: "Trust crt"
  shell: update-ca-trust
  when: new_crt|changed

- name: "Update CA list for python-requests"
  copy:
      src: /etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt
      dest: "{{ item }}/cacert.pem"
      mode: 0444
      owner: root
      group: root
  when: new_crt|changed
  with_items:
    - /usr/lib/python2.7/site-packages/requests/
