#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Pecan Application Configurations
app = {
    'root': 'cauth.controllers.root.RootController',
    'modules': ['cauth'],
    'static_root': '%(confdir)s/public',
    'template_path': '%(confdir)s/templates',
    'priv_key_path': '/var/lib/cauth/keys/privkey.pem',
    'cookie_domain': '{{ fqdn }}',
    'debug': False,
    'cookie_period': {{ authentication['sso_cookie_timeout'] }}
}

logging = {
    'loggers': {
        'cauth': {'level': 'DEBUG',
                  'handlers': ['file_handler']},
        'pysflib': {'level': 'DEBUG',
                     'handlers': ['file_handler']},
        '__force_dict__': True
    },
    'handlers': {
        'file_handler': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'formatter': 'simple',
            'filename': '/var/log/cauth/cauth.log',
        }
    },
    'formatters': {
        'simple': {
            'format': ('%(asctime)s %(levelname)-5.5s [%(name)s]'
                       '[%(threadName)s] %(message)s')
        }
    }
}

# Authorization configurations
auth = {
    {% if not authentication['ldap']['disabled'] %}
    'ldap': {
        'host': '{{ authentication['ldap']['ldap_url'] }}',
        'dn': '{{ authentication['ldap']['ldap_account_username_attribute'] }}=%(username)s,' + '{{ authentication['ldap']['ldap_account_base'] }}',
        'sn': '{{ authentication['ldap']['ldap_account_surname_attribute'] }}',
        'mail': '{{ authentication['ldap']['ldap_account_mail_attribute'] }}',
    },
    {% endif %}
    {% if not authentication['oauth2']['github']['disabled'] %}
    'github': {
        'redirect_uri': '{{ gateway_url }}/auth/login/oauth2/callback',
        'client_id': '{{ authentication['oauth2']['github']['client_id'] }}',
        'client_secret': '{{ authentication['oauth2']['github']['client_secret'] }}',
        'allowed_organizations': '{{ authentication['oauth2']['github']['github_allowed_organizations'] }}'
    },
    {% endif %}
    {% if not authentication['oauth2']['google']['disabled'] %}
    'google': {
        'redirect_uri': '{{ gateway_url }}/auth/login/oauth2/callback',
        'client_id': '{{ authentication['oauth2']['google']['client_id'] }}',
        'client_secret': '{{ authentication['oauth2']['google']['client_secret'] }}'
    },
    {% endif %}
    {% if not authentication['oauth2']['bitbucket']['disabled'] %}
    'bitbucket': {
        'redirect_uri': '{{ gateway_url }}/auth/login/oauth2/callback',
        'client_id': '{{ authentication['oauth2']['bitbucket']['client_id'] }}',
        'client_secret': '{{ authentication['oauth2']['bitbucket']['client_secret'] }}'
    },
    {% endif %}
    'localdb': {
        'managesf_url': 'http://managesf.{{ fqdn }}',
    },
    {% if not authentication['openid']['disabled'] %}
    'openid': {
        'auth_url': '{{ authentication['openid']['server'] }}',
        'redirect_uri': '/auth/login/openid/callback'
    },
    {% endif %}
    {% if not authentication['openid_connect']['disabled'] %}
    'openid_connect': {
        'issuer_url': '{{ authentication['openid_connect']['issuer_url'] }}',
        'client_id': '{{ authentication['openid_connect']['client_id'] }}',
        'client_secret': '{{ authentication['openid_connect']['client_secret'] }}',
        'redirect_uri': '{{ gateway_url }}/auth/login/openid_connect/callback',
        'mapping': {
            'login': '{{ authentication['openid_connect']['mapping']['login'] }}',
            'email': '{{ authentication['openid_connect']['mapping']['email'] }}',
            'name': '{{ authentication['openid_connect']['mapping']['name'] }}',
            'uid': '{{ authentication['openid_connect']['mapping']['uid'] }}',
            'ssh_keys': '{{ authentication['openid_connect']['mapping']['ssh_keys']|default('') }}',
        },
    },
    {% endif %}
    'users': {
        "admin": {
            "lastname": "Software Factory Administrator",
            "mail": "admin@{{ fqdn }}",
            "password": "{{ admin_password_hashed.stdout }}",
        },
        "SF_SERVICE_USER":{
            "lastname": "SF user for automated tasks",
            "mail": "service.user@{{ fqdn }}",
            "password": "{{ service_user_password_hashed.stdout }}",
        },
        {% if fqdn == "sftests.com" %}
            "user2": {
                "lastname": "Demo user2",
                "mail": "user2@sftests.com",
                "password": "{{ admin_password_hashed.stdout }}",
            },
            "user3": {
                "lastname": "Demo user3",
                "mail": "user3@sftests.com",
                "password": "{{ admin_password_hashed.stdout }}",
            },
             "user4": {
                "lastname": "Demo user4",
                "mail": "user4@sftests.com",
                "password": "{{ admin_password_hashed.stdout }}",
            },
            "user5": {
                "lastname": "Demo user5",
                "mail": "user5@sftests.com",
                "password": "{{ admin_password_hashed.stdout }}",
            }
        {% endif %}
    }
}

services = ['managesf', ]

sqlalchemy = {
    'url'           : 'mysql://{{ cauth_mysql_user }}:{{ cauth_mysql_password }}@{{ cauth_mysql_host }}:{{ cauth_mysql_port }}/{{ cauth_mysql_db }}',
    'echo'          : True,
    'encoding'      : 'utf-8'
}

managesf = {
    'url'           : 'http://managesf.{{ fqdn }}',
}
