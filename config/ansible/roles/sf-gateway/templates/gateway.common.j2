    RewriteMap base64helper "prg:/usr/local/sbin/base64helper"

    # Disable caching of static files
    <LocationMatch "/static">
    CacheDisable on
    </LocationMatch>

    # Don't login to Storyboard itself, use cauth instead
    <LocationMatch "/storyboard_api/openid/">
        RewriteEngine On
        RewriteRule ^(.*)$ /auth/login [R,NC,L]
    </LocationMatch>

    <LocationMatch "/r/(?!(login|logout|a))">
    RewriteEngine On

    # Logged in in SSO, but logged out from Gerrit
    RewriteCond %{HTTP_COOKIE} !^GerritAccount.*$ [NC]
    RewriteCond %{HTTP_COOKIE} ^.*auth_pubtkt.*$ [NC]
    RewriteRule ^(.*)$ /r/login [R,NC,L]

    # Logged in in Gerrit, but logged out from cauth
    RewriteCond %{HTTP_COOKIE} ^GerritAccount.*$ [NC]
    RewriteCond %{HTTP_COOKIE} !^.*auth_pubtkt.*$ [NC]
    RewriteRule ^(.*)$ /r/logout [R,NC,L]
    </LocationMatch>

    <LocationMatch "/r/(login|a)(/|$)">
        Order Allow,Deny
        Allow from all

        AuthType mod_auth_pubtkt
        TKTAuthFakeBasicAuth on
        TKTAuthLoginURL /auth/login
        TKTAuthDebug 1
        require valid-user
    </LocationMatch>

    # Redirect a gerrit page that give an easy access to gitweb
    # if user does not have the GerritAccount cookie in its browser
    # This prevent the 'Not Found' 404 from Gerrit if cookie not set
    <LocationMatch "/r/gitweb.*">
        RewriteEngine On
        RewriteCond %{HTTP_COOKIE} !^.*gerritaccount.*$ [NC]
        RewriteCond %{QUERY_STRING} ^p=(.*).git;a=summary$
        RewriteRule /r/gitweb.*$ /r/#/admin/projects/%1,branches [QSD,R,L,NE]
    </LocationMatch>

{% if 'grafana' in roles %}
    <LocationMatch "^/grafana/">
        RequestHeader unset X-Forwarded-User
        <If "%{HTTP_COOKIE} =~ /auth_pubtkt=.*/">
            AuthType mod_auth_pubtkt
            TKTAuthLoginURL /auth/login
            TKTAuthFakeBasicAuth on
            TKTAuthDebug 1
            AuthName "Grafana"
            require valid-user
            RewriteEngine On
            RewriteCond %{LA-U:REMOTE_USER} (.+)
            RewriteRule .* - [E=RU:%1,NS]
            RequestHeader set X-Forwarded-User %{RU}e
        </If>
    </LocationMatch>
{% endif %}

    Alias "/docs/managesf" "/usr/share/doc/managesf/"
    Alias "/docs/sfmanager" "/usr/share/doc/python-sfmanager/"
    Alias "/docs/" "/usr/share/doc/software-factory/"
    <Directory "/usr/share/doc/">
        Require all granted
    </Directory>


    <IfModule mod_proxy.c>
        ProxyVia On
        ProxyRequests Off

        ProxyPass /r/ {{ gerrit_internal_url }} nocanon retry=0
        ProxyPassReverse /r/ {{ gerrit_internal_url }}

        # Requires internal authentication in Gerrit (without SSO)
        ProxyPass /api/ {{ gerrit_internal_url }} nocanon
        ProxyPassReverse /api/ {{ gerrit_internal_url }}

        ProxyPass /jenkins/ {{ jenkins_internal_url }} nocanon retry=0
        ProxyPassReverse /jenkins/ {{ jenkins_internal_url }}

        ProxyPass /zuul/ {{ zuul_internal_url }} nocanon retry=0
        ProxyPassReverse /zuul/ {{ zuul_internal_url }}

        ProxyPass /storyboard_api/ http://storyboard:20000/v1/ nocanon retry=0
        ProxyPassReverse /storyboard_api/ http://storyboard:20000/v1/

        ProxyPass /manage/ http://managesf:20001/ retry=0 timeout=2400
        ProxyPassReverse /manage/ http://managesf:20001/ timeout=2400

        ProxyPass /etherpad/ http://127.0.0.1:9001/ retry=0
        ProxyPassReverse /etherpad/ http://127.0.0.1:9001/

        ProxyPass /paste/ http://127.0.0.1:5000/paste/ retry=0
        ProxyPassReverse /paste/ http://127.0.0.1:5000/paste/

        ProxyPreserveHost On
        AllowEncodedSlashes NoDecode
        <Proxy *>
            Options FollowSymLinks MultiViews
            AllowOverride All
            Order allow,deny
            allow from all
        </Proxy>

        {% for prefix in authentication['allowed_proxy_prefixes'] %}
        ProxyPassMatch ^/jenkinslogs/{{ prefix }}(.*)$ http://{{ prefix }}$1
        {% endfor %}

{% if 'grafana' in roles %}
        RewriteRule ^/grafana$ grafana/ [R]
        ProxyPass /grafana/ {{ grafana_internal_url }}
        ProxyPassReverse /grafana/ {{ grafana_internal_url }}
{% endif %}
    </IfModule>

    <LocationMatch "^/jenkinslogs/">
        Order Allow,Deny
        Allow from all

        AuthType mod_auth_pubtkt
        TKTAuthFakeBasicAuth on
        TKTAuthLoginURL /auth/login
        TKTAuthDebug 1
        require valid-user
    </LocationMatch>

    DocumentRoot /var/www/

    RewriteEngine On
    RewriteRule ^/$ /{{ welcome_page_path }} [R]

    <Location "/dashboard">
        RewriteEngine on
        RewriteCond %{REQUEST_FILENAME} -s [OR]
        RewriteCond %{REQUEST_FILENAME} -l [OR]
        RewriteCond %{REQUEST_FILENAME} -d
        RewriteRule ^.*$ - [NC,L]

        RewriteRule ^(.*) /dashboard/index.html [NC,L]
    </location>

    <LocationMatch "^/storyboard_api">
        # If api requests are authenticated, check cauth cookie
        <If "%{HTTP:Authorization} =~/Bearer .*/">
            AuthType mod_auth_pubtkt
            TKTAuthLoginURL /auth/login
            TKTAuthFakeBasicAuth on
            TKTAuthDebug 1
            require valid-user
            # Enforce token name to be cauth user
            RequestHeader set Authorization "Bearer %{REMOTE_USER}e"
            Header set Cache-Control "no-cache, must-revalidate"
        </If>
    </LocationMatch>


    <Location "/manage">
        RequestHeader unset X-Remote-User
        <If "%{HTTP_COOKIE} =~ /auth_pubtkt=.*/">
            AuthType mod_auth_pubtkt
            TKTAuthLoginURL /auth/login
            TKTAuthFakeBasicAuth on
            TKTAuthDebug 1
            require valid-user
            RequestHeader set X-Remote-User %{REMOTE_USER}s
        </If>
    </Location>

    <Location "/manage/bind">
        Allow from All
        Satisfy Any
    </Location>

    <LocationMatch "^/api">
        AuthType Basic
        AuthName "Gerrit API"
        AuthUserFile /etc/httpd/managesf_htpasswd
        require valid-user

        Order Allow,Deny
        Allow from {{ fqdn }}

        # Grant access based on password authentication or IP address
        Satisfy any

        # Helper to send a fake authorization header to Gerrit
        RewriteCond %{REMOTE_USER} (.+)
        RewriteRule .* - [E=B64:${base64helper:%{REMOTE_USER}},NE]
        RequestHeader set Authorization "Basic %{B64}e"

        # Requests from localhost get admin permission
        RewriteCond %{REMOTE_HOST} ^.*.{{ fqdn }}$
        RewriteRule .* - [E=B64:${base64helper:admin},NE]
        RequestHeader set Authorization "Basic %{B64}e"
    </LocationMatch>

    # Gerrit API fake auth requires password to set at 'password'
    # Don't give a chance to a user to change it
    <LocationMatch "^/r/accounts/.*/password.http">
      <limit PUT DELETE>
        Order Allow,Deny
        Allow from {{ fqdn }}
      </limit>
    </LocationMatch>

    <Directory /var/www>
        AllowOverride None
        Order allow,deny
        allow from all
    </Directory>

    <Directory /var/www/managesf>
        Order allow,deny
        Deny from all
    </Directory>

    <Directory /var/www/cauth>
        Order allow,deny
        Deny from all
    </Directory>

    {% if authentication["authenticated_only"] %}
    # Make sure static files, docs, git and the topmenu are accessible even if
    # anonymous access is disabled. Git itself is protected by Gerrit
    <LocationMatch "^(?!/(r/.*/(info/refs|git-upload-pack)|docs|static|auth|index.html|$))">
        Order deny,allow
        Allow from all
        AuthType mod_auth_pubtkt
        TKTAuthLoginURL /auth/login
        TKTAuthFakeBasicAuth on
        TKTAuthDebug 1
        require valid-user
    </LocationMatch>
    {% endif %}
