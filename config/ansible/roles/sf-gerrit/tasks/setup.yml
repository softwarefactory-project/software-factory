---
# Use real shell for replication tests. TODO: improve replication test and set /sbin/nologin shell
- name: "Create gerrit user"
  include: /etc/ansible/tasks/create_user.yml user_name=gerrit ssh_key=gerrit_service_rsa shell=/bin/bash

- name: "Chmod cgi file"
  file:
    path: /var/www/git/gitweb.cgi
    mode: 0755

- name: "Install project.config"
  copy:
    src: "project.config"
    dest: "/root/project.config"

# During the first run, config repo isn't created, so use the default file
- include_vars: "{{ item }}"
  with_first_found:
    - /root/config/gerrit/commentlinks.yaml
    - /usr/local/share/sf-config-repo/gerrit/commentlinks.yaml

- name: "Install configuration files"
  template:
    src: "{{ item.name }}.j2"
    dest: "{{ item.path }}/{{ item.name }}"
    owner: gerrit
    group: gerrit
    mode: "{{ item.mode }}"
  with_items:
    - { name: patchset-created,
        path: /var/lib/gerrit/hooks,
        mode: '0740' }
    - { name: change-merged,
        path: /var/lib/gerrit/hooks,
        mode: '0740' }
    - { name: gerrit.config,
        path: /etc/gerrit,
        mode: '0644' }
    - { name: secure.config,
        path: /etc/gerrit,
        mode: '0600' }
  notify: [restart gerrit]

- name: "Install static configuration files for gerrit"
  copy:
    src: "{{ item.name }}"
    dest: /etc/gerrit/
    mode: 0644
    owner: gerrit
    group: gerrit
  with_items:
    - { name: replication.config }
    - { name: GerritSiteHeader.html }
    - { name: GerritSite.css }

- name: "Install initialization and migration scripts"
  template:
    src: "{{ item.name }}.j2"
    dest: "/root/{{ item.name }}"
    owner: root
    group: root
    mode: "{{ item.mode | default('0700')}}"
  with_items:
    - { name: gerrit-firstuser-init.sql, mode: '0644' }
    - { name: gerrit-restore-user-keys.sql, mode: '0644' }
    - { name: gerrit-set-default-acl.sh }
    - { name: gerrit-set-ci-user.sh }

- name: "Add monit service check"
  copy:
    src: monit
    dest: /etc/monit.d/gerrit
    owner: root
    group: root
    mode: 0640
  notify:
    - restart monit

- name: "Copy gerrit service key"
  copy:
      content: "{{ hostvars[inventory_hostname][item.name] }}"
      dest: "/etc/gerrit/{{ item.file }}"
      mode: "{{ item.mode }}"
      owner: gerrit
      group: gerrit
  with_items:
      - {name: gerrit_service_rsa, file: ssh_host_rsa_key, mode: "0400"}
      - {name: gerrit_service_rsa_pub, file: ssh_host_rsa_key.pub, mode: "0444"}

- name: "Copy gerrit admin key"
  copy:
      content: "{{ gerrit_admin_rsa }}"
      dest: "/root/.ssh/gerrit_admin"
      mode: "0400"

- name: "Copy gerrit admin pub key"
  copy:
      content: "{{ gerrit_admin_rsa_pub }}"
      dest: "/root/.ssh/gerrit_admin.pub"
      mode: "0444"

- name: "Allow gerrit to connect to himself for self replication"
  authorized_key:
      user: gerrit
      key: "{{ gerrit_service_rsa_pub }}"

- name: Apply selinux port labelling
  seport:
      ports: "{{ gerrit_port }}"
      proto: tcp
      setype: http_port_t
      state: present
  when: ansible_selinux.status == "enabled"

- name: "Test if gerrit All-Projects exists"
  stat: path=/var/lib/gerrit/git/All-Projects.git
  register: gerrit_allprojects

- name: "Test if gerrit is running"
  command: systemctl -q is-active gerrit
  register: _gerrit
  failed_when: _gerrit.rc != 3 and _gerrit.rc != 0

- name: "Initialize/Upgrade gerrit when service is not running"
  command: /usr/bin/java -jar /usr/lib64/gerrit/release.war init -d /var/lib/gerrit --batch --no-auto-start --skip-plugins
  become: true
  become_user: gerrit
  when: _gerrit.rc == 3

- name: "Reindex gerrit when service is not running"
  command: /usr/bin/java -jar /usr/lib64/gerrit/release.war reindex -d /var/lib/gerrit
  become: true
  become_user: gerrit
  when: _gerrit.rc == 3

- name: "Start service"
  service: name=gerrit state=started enabled=yes

- name: "Add initial user"
  shell: 'mysql gerrit < /root/gerrit-firstuser-init.sql'
  when: gerrit_allprojects.stat.exists == False

- name: "Add jenkins user"
  command: /root/gerrit-set-ci-user.sh
  when: gerrit_allprojects.stat.exists == False

- name: "Set ACL"
  command: /root/gerrit-set-default-acl.sh
  when: gerrit_allprojects.stat.exists == False
