heat_template_version: 2013-05-23

description: >
  {{ description }}

parameters:
  key_name:
    type: string
    description: Name of the KeyPair to enable SSH access to the SF instance
    default: id_rsa
  domain:
    type: string
    description: Domain name of deployment
    default: sftests.com
  image_id:
    type: string
    description: Glance image ID of the SF image
{% if fixed_ip %}
  floatingip_id:
    type: string
    description: Fixed floating IP id for the gateway
{% endif %}
  external_network:
    type: string
    description: The name or UUID of the external net
    default: public
  sg_admin_cidr:
    type: string
    description: Ip range authorized for shell access
    default: 0.0.0.0/0
  sg_user_cidr:
    type: string
    description: Ip range authorized for SF service access
    default: 0.0.0.0/0
  nameservers:
    type: json
    description: Nameserver IPs used by VMs
    default: ['8.8.8.8', '8.8.4.4']
{# Until SoftwareConfig works, disabled auto-configuration for multi-node #}
{% if inventory|length == 1 %}
  bootstrap:
    type: boolean
    description: Whether or not run a first sfconfig.py
    default: true
{% endif %}

resources:
{# Disabled SoftwareConfig
## Run sfconfig through SoftwareDeployment is disabled until os-collect-config is properly installed
#
{% if inventory|length > 1 %}
  key_gen:
    type: OS::Heat::SoftwareConfig
    properties:
      outputs:
        - name: id_rsa_pub
      group: script
      config: |
        #!/bin/bash
        test -f /root/.ssh/id_rsa.pub || ssh-keygen -q -t rsa -N "" -f /root/.ssh/id_rsa
        cat .ssh/id_rsa.pub
  do_key_gen:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: key_gen
      server:
        get_resource: sf_{% for host in inventory %}{% if 'install-server' in host['roles'] %}{{ host['name'] }}{% endif %}{% endfor %}_instance


  key_add:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: id_rsa_pub
      group: script
      config: |
        #!/bin/bash
        echo "${id_rsa_pub}" | tee -a /root/.ssh/authorized_keys

{% for host in inventory %}{% if 'install-server' not in host['roles'] %}
  do_key_add_{{ host['name'] }}:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        id_rsa_pub:
          get_attr: [do_key_gen, id_rsa_pub]
      config:
        get_resource: key_add
      server:
        get_resource: sf_{{ host['name'] }}_instance
{% endif %}{% endfor %}
{% endif %}

  sfconfig:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: domain
        - name: bootstrap
        - name: adminpwd
{% for host in inventory %}{% if 'install-server' not in host['roles'] %}
        - name: {{ host['ip'] }}
{% endif %}{% endfor %}
      group: script
      config: |
        #!/bin/bash
        export HOME=/root
        export USER=root
        export LOGNAME=root
        export TERM=xterm
        export SHELL=/bin/bash
        export SHLVL=1
        sed -i 's/admin_password:.*/admin_password: adminpwd/' /etc/software-factory/sfconfig.yaml
        sed -i 's/^fqdn:.*/fqdn: domain/' /etc/software-factory/sfconfig.yaml
        cat << EOF > /etc/software-factory/arch.yaml
        {{ arch_raw.replace('\n', '\n        ') }}
        EOF
        if [ "bootstrap" == "True" ]; then
            sfconfig.py 2>&1
        fi

  run_sfconfig:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        domain: {get_param: domain}
        bootstrap: {get_param: bootstrap}
        adminpwd: {get_attr: [admin_password, value]}
{% for host in inventory %}{% if 'install-server' not in host['roles'] %}
        {{ host['ip'] }}: {get_attr: [sf_{{ host['name'] }}_instance, first_address]}
{% endif %}{% endfor %}
      config:
        get_resource: sfconfig
      server:
        get_resource: sf_{% for host in inventory %}{% if 'install-server' in host['roles'] %}{{ host['name'] }}{% endif %}{% endfor %}_instance
#}
  admin_password:
    type: OS::Heat::RandomString
    properties:
      length: 16

  sf_net:
    type: OS::Neutron::Net

  sf_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: sf_net }
      cidr: 192.168.240.0/24
      enable_dhcp: true
      dns_nameservers: { get_param: nameservers }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: sf_subnet }

  sf_secgroup_admin:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: { get_param: sg_admin_cidr },
         protocol: tcp,
         port_range_min: 22,
         port_range_max: 22,},
        {remote_ip_prefix: { get_param: sg_admin_cidr },
         protocol: icmp,},
        {remote_ip_prefix: 192.168.240.0/24,
         protocol: tcp,
         port_range_min: 0,
         port_range_max: 65535,},
        {remote_ip_prefix: 192.168.240.0/24,
         protocol: udp,
         port_range_min: 0,
         port_range_max: 65535,},
        {remote_ip_prefix: 192.168.240.0/24,
         protocol: icmp,},
        ]

  sf_secgroup_gateway:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
{% for service, ports in (
    ('gateway', (('tcp', 80), ('tcp', 443))),
    ('gerrit', (('tcp', 29418),)),
    ('murmur', (('tcp', 64738), ('udp', 64738))),
    ('firehose', (('tcp', 1883), ('tcp', 1884)))
    ) %}
{% for port in ports %}
        {remote_ip_prefix: { get_param: sg_user_cidr },
         protocol: {{ port[0] }},
         port_range_min: {{ port[1] }},
         port_range_max: {{ port[1] }},},
{% endfor %}
{% endfor %}
        ]

{% for host in inventory %}
  sf_{{ host['name'] }}_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_secgroup_admin },
{% if "gateway" in host["roles"] %}
                         { get_resource: sf_secgroup_gateway },
{% endif %}
                         ]

  sf_{{ host['name'] }}_floating_ip:
{% if "gateway" in host["roles"] and fixed_ip %}
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: floatingip_id }
{% else %}
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
{% endif %}
      port_id: { get_resource: sf_{{ host['name'] }}_port }

  sf_{{ host['name'] }}_volume:
    type: OS::Cinder::Volume
    properties:
      image : { get_param: image_id }
      size  : {{ host['disk']|default(20) }}

  sf_{{ host['name'] }}_instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: {{ host['name'] }}.domain
          params: {domain: {get_param: domain}}
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : sf_{{ host['name'] }}_volume } }]
      flavor: {{ host['flavor'] }}
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: sf_{{ host['name'] }}_port }
{# Disabled SoftwareConfig
      user_data_format: SOFTWARE_CONFIG
#}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            write_files:
            - content: |
               #!/bin/bash
               export HOME=/root
               export USER=root
               export LOGNAME=root
               export TERM=xterm
               export SHELL=/bin/bash
               export SHLVL=1
{% if 'install-server' in host['roles'] %}
               sed -i 's/admin_password:.*/admin_password: adminpwd/' /etc/software-factory/sfconfig.yaml
               sed -i 's/^fqdn:.*/fqdn: domain/' /etc/software-factory/sfconfig.yaml
               cat << EOF > /etc/software-factory/arch.yaml
               {{ arch_raw.replace('\n', '\n               ') }}
               EOF
{# Until SoftwareConfig works, disabled auto-configuration for multi-node #}
{% if inventory|length == 1 %}
               if [ "bootstrap" == "True" ]; then
                   sfconfig.py
               fi
{% endif %}
{% endif %}
              path: /root/startup.sh
            runcmd:
              - chmod +x /root/startup.sh
              - /root/startup.sh
              - rm -f /root/startup.sh
          params:
            domain: {get_param: domain}
            bootstrap: {get_param: bootstrap}
            adminpwd: {get_attr: [admin_password, value]}
{% if 'install-server' in host['roles'] %}{% for host in inventory %}
{% if 'install-server' not in host['roles'] %}
            {{ host['ip'] }}: {get_attr: [sf_{{ host['name'] }}_instance, first_address]}
{% endif %}
{% endfor %}{% endif %}


{% endfor %}
  slave_net:
    type: OS::Neutron::Net

  slave_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: slave_net }
      cidr: "192.168.254.0/24"
      dns_nameservers: { get_param: nameservers }
      ip_version: 4

  slave_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network }

  slave_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: slave_router }
      subnet: { get_resource: slave_subnet }


outputs:
{% if not fixed_ip %}
  sf_public_address:
    description: Public address of SF
    value:
      str_replace:
        template: "Public address of the SF instance: host"
        params:
          host: { get_attr: [sf_{% for host in inventory %}{% if 'gateway' in host['roles'] %}{{ host['name'] }}{% endif %}{% endfor %}_floating_ip, floating_ip_address] }
{% endif %}

{# Disabled SoftwareConfig
  sfconfig_output:
    description: Configuration script output
    value:
      get_attr: [run_sfconfig, deploy_stdout]
#}

  administrator_password:
    description: SF administrator password
    value:
      str_replace:
        template: "Administrator password for SF services: passwd"
        params:
          passwd: {get_attr: [admin_password, value]}
  slave_network:
    description: slave network
    value:
      str_replace:
        template: "Nodepool slave network: netname"
        params:
          netname: { get_attr: [slave_net, name] }
