---
# * Setup provider with sfconfig.py
- name: "Check nodepool configuration"
  include: playbooks/sfconfig_nodepool_setup.yaml

- hosts: nodepool
  tasks:
    - name: "Check service"
      command: systemctl status nodepool
      register: nodepool_service

    - name: "Check service errors"
      fail: msg='Nodepool service is not happy'
      when: nodepool_service.stdout.lower().find("fail") != -1

- name: "Reset config repos"
  include: playbooks/config_reset.yaml

# * Add image and node label to config-repo
- hosts: install-server
  tasks:
    - name: "Check if image is already defined"
      shell: "grep -q '{{ node }}' /root/config/nodepool/nodepool.yaml && grep -q '{{ base_image_name }}' /root/config/nodepool/nodepool.yaml"
      register: sfconfiged
      failed_when: False

    - name: Adds nodepool providers
      when: sfconfiged.rc
      command: >
        hieraedit.py --yaml /root/config/nodepool/nodepool.yaml --eval providers "[{
            'name': '{{ provider_name }}',
            'boot-timeout': 120,
            'clean-floating-ips': True,
            'cloud': '{{ provider_name }}',
            'pool': '{{ os_pool }}',
            'boot-timeout': 120,
            'max-servers': 3,
            'rate': 3.0,
            'networks': [{'name': '{{ os_slave_network }}'}],
            'images': [{
                'name': '{{ image_name }}',
                'base-image': '{{ base_image_name }}',
                'username': 'centos',
                'setup': 'nodepool_demo.sh',
                'min-ram': 2048,
            }]
        }]"

    - name: Adds nodepool label
      when: sfconfiged.rc
      command: >
        hieraedit.py --yaml /root/config/nodepool/nodepool.yaml --eval labels "[{
            'name': '{{ node }}',
            'image': '{{ image_name }}',
            'min-ready': 2,
            'providers': [{'name': '{{ provider_name }}'}]
        }]"

    - name: Copy nodepool-demo image script
      when: sfconfiged.rc
      copy: src=files/nodepool_demo.sh dest=/root/config/nodepool/nodepool_demo.sh mode="u=rwx,g=rx,o=rx"

    - name: Update change
      when: sfconfiged.rc
      command: chdir=/root/config  {{ item }}
      with_items:
          - 'git add nodepool/nodepool_demo.sh'
          - 'git commit -a -m "Add {{ node }} label to {{ provider_name }} provider"'
      environment: {'EDITOR':'test'}

- name: "Submit config repos"
  include: playbooks/config_submit_change.yaml
  when: sfconfiged.rc


# * Check if slaves are running
- hosts: nodepool
  tasks:
    - name: Wait for image build start
      wait_for: path=/var/log/nodepool/nodepool.log search_regex="Creating image.*{{ image_name }}"

    - name: "Check image is building"
      command: nodepool image-list
      register: imagelist
      failed_when: imagelist.stdout.find("{{ image_name }}") == -1

    - name: "Wait for ssh connection to be okay for image build"
      wait_for: path=/var/log/nodepool/image.log timeout=1200 search_regex="{{ image_name }}.* access okay"

    - name: "Wait for image build to succeed: Base setup done."
      wait_for: path=/var/log/nodepool/image.log timeout=1200 search_regex="nodepool.image.build.{{ provider_name }}.{{ image_name }}.*Base setup done."

    - name: "Wait for snapshot to be ready"
      wait_for: path=/var/log/nodepool/nodepool.log timeout=1200 search_regex="SnapshotImageUpdater.* Image .*{{ image_name }}.* in {{ provider_name }} is ready"

    - name: "Wait for the first slave node to connect on Jenkins"
      wait_for: path=/var/log/nodepool/nodepool.log timeout=1200 search_regex="NodeLauncher. Node .* is ready"

    - name: "Wait for the first slave to appear in Jenkins"
      shell: for i in {1..100}; do sleep ${i}; curl -Ls https://{{ fqdn }}/jenkins/computer/api/json | python -c "import sys, json; d = json.loads(sys.stdin.read()); slaves = [s for s in d['computer'] if ('base_centos-default' in s['displayName'])]; len(slaves) > 0 and sys.exit(0) or sys.exit(1)" && exit 0; done; exit 1

    - name: "Wait for the first slave to appears online in Jenkins"
      shell: for i in {1..100}; do sleep ${i}; curl -Ls https://{{ fqdn }}/jenkins/computer/api/json | python -c "import sys, json; d = json.loads(sys.stdin.read()); slaves = [s for s in d['computer'] if ('base_centos-default' in s['displayName'])]; any(s['offline'] == False for s in slaves) and sys.exit(0) or sys.exit(1)" && exit 0; done; exit 1

    - name: "Query the nodes REST API to get last node info"
      uri:
        url: http://managesf:20001/nodes/
        HEADER_X-Remote-User: admin
        return_content: yes
        body_format: json
      register: nodes_info

    - name: "Hold the node with the REST API"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json['nodepool'][0]['node_id'] }}
        HEADER_X-Remote-User: admin

    - name: "Create a test ssh key"
      command: ssh-keygen -N '' -f /tmp/{{ nodes_info.json['nodepool'][0]['node_name'] }}_id_rsa

    - name: "Add the test ssh key to node's authorized keys with the REST API"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json['nodepool'][0]['node_id'] }}/authorize_key/
        method: POST
        body: "public_key={{ lookup('file', '/tmp/' + nodes_info.json.nodepool.0.node_name + '_id_rsa.pub')|urlencode() }}"
        HEADER_X-Remote-User: admin
        return_content: yes
      register: ak_output
      failed_when: "'OK' not in ak_output.content"

    - name: "SSH into node with the test key"
      command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q -i /tmp/{{ nodes_info.json.nodepool.0.node_name }}_id_rsa jenkins@{{ nodes_info.json.nodepool.0.ip }} whoami
      register: ssh_whoami
      failed_when: ssh_whoami.stdout.find("jenkins") == -1

    - name: "Schedule node for deletion"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json.nodepool.0.node_id }}/
        method: DELETE
        HEADER_X-Remote-User: admin
        return_content: yes
      register: del_node
      failed_when: "'delete' not in del_node.content"

    - name: "Delete test ssh key"
      file:
        path: "/tmp/{{ nodes_info.json.nodepool.0.node_name }}_{{ item }}"
        state: absent
      with_items:
        - "id_rsa"
        - "id_rsa.pub"
