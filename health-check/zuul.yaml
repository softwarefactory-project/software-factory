---
# * Create a new project
- name: "Create project"
  include: playbooks/managesf_project_create.yaml

- name: "Check if jenkins job exists"
  include: playbooks/jenkins_check_job.yaml job="{{ check[0] }}"
  when: jobs_host == 'jenkins'

- name: "Check if zuul-launcher job exists"
  include: playbooks/zuul_check_job.yaml job="{{ check[0] }}"
  when: jobs_host == 'zuul'

- name: "Check if zuul layout exists"
  include: playbooks/zuul_check_layout.yaml project_name="{{ project }}"

# * Add jobs and zuul layout to config repo
- name: "Reset config repos"
  include: playbooks/config_reset.yaml
  when: hostvars[groups[jobs_host][0]]["job_created_" + jobs_host].rc != 0 or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0

- hosts: install-server
  tasks:
    - block:
      - name: "Add config repo files"
        template: src=templates/{{ item.template }}.j2 dest={{ config_path }}/{{ item.dest }}
        with_items:
          - { template: "health-jobs.yaml", dest: "jobs-zuul/health-check.yaml" }
          - { template: "project-layout.yaml", dest: "zuul/{{ project|replace('/', '_')}}.yaml" }
          - { template: "project-jobs.yaml", dest: "jobs-zuul/{{ project|replace('/', '_')}}.yaml" }
        when: jobs_host == 'zuul'

      - name: "Add config repo files"
        template: src=templates/{{ item.template }}.j2 dest={{ config_path }}/{{ item.dest }}
        with_items:
          - { template: "health-jobs.yaml", dest: "jobs/health-check.yaml" }
          - { template: "project-layout.yaml", dest: "zuul/{{ project|replace('/', '_')}}.yaml" }
          - { template: "project-jobs.yaml", dest: "jobs/{{ project|replace('/', '_')}}.yaml" }
        when: jobs_host == 'jenkins'

      - name: "Commit change"
        command: chdir={{ config_path }} bash -c "git add */*.yaml; exec git commit -a -m 'Add {{ project }} to config repo'"
      when: hostvars[groups[jobs_host][0]]["job_created_" + jobs_host].rc != 0 or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0


- name: "Submit config repos"
  include: playbooks/config_submit_change.yaml
  when: hostvars[groups[jobs_host][0]]["job_created_" + jobs_host].rc != 0 or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0

- hosts: install-server
  tasks:
    - name: "wait for new jobs to appear in zuul"
      shell: echo status | nc localhost 4730 | grep -q "build:{{ check[0] }}:{{ node }}"
      register: newjob
      until: newjob.rc == 0
      retries: 36
      delay: 5
      changed_when: false
      when: jobs_host == 'zuul'

    - name: "wait for new jobs to appear in jenkins"
      command: curl --head --silent "http://jenkins:8081/jenkins/job/{{ check[0] }}/api/json"
      register: newjob
      until: newjob.stdout.find("200 OK") != -1
      retries: 36
      delay: 5
      changed_when: false
      when: jobs_host == 'jenkins'

    - name: "Wait for a slave to appears online in Jenkins"
      shell: for i in {1..100}; do sleep ${i}; curl -Ls https://{{ fqdn }}/jenkins/computer/api/json | python -c "import sys, json; d = json.loads(sys.stdin.read()); slaves = [s for s in d['computer'] if ('{{ node }}-default' in s['displayName'])]; any(s['offline'] == False for s in slaves) and sys.exit(0) or sys.exit(1)" && exit 0; done; exit 1
      when: node != 'master'

# * Submit a bad change and verify Jenkins CI -1
# * Fix bad change and verify Jenkins CI +1
# * Check if change got merged
- hosts: install-server
  tasks:
    - name: Commit bad change and check for test error
      command: chdir={{ project_path }} {{ item }}
      with_items:
        - 'bash -c "(echo exit 1; date) > run_tests.sh"' # Add date to prevent (no new changes reject)
        - 'bash -c "(echo exit 1; date) > run_functional-tests.sh"'
        - 'chmod +x run_tests.sh run_functional-tests.sh'
        - 'git add run_tests.sh run_functional-tests.sh'
        - 'git commit -m "Test {{ project }} repo"'
        - '/usr/share/sf-config/scripts/submit_and_wait.py --delay 600 --failure'

    - name: "Update change and check for test SUCCESS"
      command: chdir={{ project_path }} {{ item }}
      with_items:
        - 'bash -c "(echo echo TEST EXPORT \| tee ../artifacts/test_log.txt; echo exit 0; date) > run_tests.sh"' # Add date to prevent (no new changes reject)
        - 'bash -c "(echo exit 0; date) > run_functional-tests.sh"'
        - 'git commit -a --amend'
        - '/usr/share/sf-config/scripts/submit_and_wait.py --delay 600 --approve'
        - 'git fetch --all'
      environment: {'EDITOR':'test'}

    - name: "Check change was merged"
      command: chdir={{ project_path }} git diff HEAD origin/master
      register: diff
      failed_when: diff.stdout != ''

# * Check logs export
- hosts: jenkins
  tasks:
    - name: "Get artifact url from console.log"
      when: test_log_export == 'yes'
      command: "grep '^http' /var/lib/jenkins/jobs/{{ check[0] }}/lastSuccessful/log"
      register: logsurl

    - name: "Check artifact is published"
      when: test_log_export == 'yes'
      command: "curl {{ logsurl.stdout }}artifacts/test_log.txt"
      register: test_log
      failed_when: test_log.stdout.find('TEST EXPORT') == -1


# TODO: remove project and cleanup config-repo when: keep == false
