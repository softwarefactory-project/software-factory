# -*- shell-script -*-

SRC=$(cd $(dirname $0); pwd)
ORIG=${SRC}

function put_git_mark {
    local dir=$1
    sha=`git rev-parse HEAD`
    echo $sha >> ${dir}/etc/SF_GIT_COMMIT
    echo ${sf_version} >> ${dir}/etc/sf-release
}

function ansible_install {
    local role=$1
    local params=$2
    local ansible_debug="-vvv"

    [ -z "$DEBUG" ] || ansible_debug="-vvvv"
    cat <<EOF> $dir/ansible-install-playbook
- hosts: localhost
  connection: local
  roles:
    - { role: "$role", action: "install", $params }
EOF
    echo "ansible_install: installing $role with \"${params}\""
    do_chroot ${dir} env ANSIBLE_CONFIG=/usr/share/sf-config/ansible/ansible.cfg ansible-playbook $ansible_debug -e "${ANSIBLE_EXTRA_VARS}" /ansible-install-playbook
    checkpoint "$role installed (ansible)"
}

function _http_fetch {
    local remote_location=$1
    local local_location=$2
    # We retry 12 times with 10 seconds delay between retries
    curl --silent --show-error --retry 12 --retry-delay 10 -L -o $local_location $remote_location
    curl_result=$?
    if [ "$curl_result" -ne "0" ]; then
        echo "curl failed to fetch $remote_location with error $curl_result"
        exit $curl_result
    fi
}

function retry {
    # This is a really dumb retry function
    local max_retries=3
    local delay=3
    for i in $(seq $max_retries); do
        "$@" && return 0
        echo "The command return $? as error code. Retry (attempt $i) ..."
        sleep $delay
    done
    return 1
}

function http_fetch {
    if [ -f "$2" ]; then
        # Check file size
        if [ $(du -b "$2" | awk '{ print $1 }') -eq 0 ]; then
            # Remove empty file
            rm "$2"
        else
            # Already downloaded
            return 0
        fi
    fi
    retry _http_fetch "$@"
}

function clean {
    target=$1
}

add_main_repository() {
    local base=http://mirror.centos.org/centos/7/os/x86_64/Packages/
    local releaserpm=$(wget -O- -q $base/|fgrep centos-release|sed -n -e 's@.*>\(centos-release-.*\.rpm\)<.*@\1@p')
    echo "$base/$releaserpm"
}

update_repositories() {
    do_chroot $dir yum check-update || true
}

disable_repository() {
    do_chroot $dir yum-config-manager --disable $repository
}

export supported_centos_dists='centos'
export all_supported_dists="$supported_centos_dists"

fake_shadow_utils() {
    for cmd in useradd groupadd; do
        if [ ! -f ${dir}/usr/sbin/${cmd}.real ]; then
            mv ${dir}/usr/sbin/${cmd} ${dir}/usr/sbin/${cmd}.real
        fi
        do_chroot ${dir} ln -sf /usr/sbin/mngids.py /usr/sbin/${cmd}
    done
}

install_packages() {
    local chroot=$1
    shift
    local packages=$@
    do_chroot $chroot yum ${INSTALL_OPTIONS} install -y $packages
}

remove_packages() {
    local chroot=$1
    shift
    local packages=$@
    do_chroot ${chroot} yum remove $packages --assumeyes
}

update_system() {
    do_chroot ${dir} yum update -y
    if [ ! -L ${dir}/usr/sbin/useradd ]; then
        fake_shadow_utils
    fi
}

clear_packages_cache() {
    do_chroot ${dir} yum clean all
    do_chroot ${dir} rm -f /var/cache/yum/*/packages/*rpm
}

rebuild_db() {
    do_chroot $dir rpm --rebuilddb
}

fatal_error() {
    echo "$*" 1>&2
    clean_mount_points
    exit 1
}

check_binary() {
    type -p $1 > /dev/null || fatal_error "$1 is missing"
}

do_chroot() {
    local chdir="$1"
    shift
    PATH=/bin/:/sbin:$PATH LANG=C LC_ALL=C LC_CTYPE=C LANGUAGE=C chroot "$chdir" "$@"
}

clean_chroot() {
    for log in $(find $dir/var/log -type f || :); do
        > $log
    done
    rm -rf $dir/tmp/* $dir/var/tmp/* $dir/tmp/.??* $dir/var/tmp/* $dir/var/tmp/.??* $dir/ansible-install-playbook* || :
}

clean_mount_points() {
    if [ ! -d "${dir}" ]; then
        return
    fi

    # Since /dev is a copy, we shall clean it as it will be reconstructed at boot time
    umount ${dir}/dev/shm || true
    umount ${dir}/dev/ || true
    umount ${dir}/sys/ || true
    umount ${dir}/proc/ || true
    rm -rf ${dir}/dev
    mkdir -p ${dir}/dev

    a=10
    local lazy=""

    while (grep -qi " ${dir}" /proc/mounts); do
        # After 8 tries, let's try the lazy umount
        # As we are on virtual fs, this is not an issue
        if [ $a -eq 8 ]; then
            lazy="-l"
        fi

        # Let's umount all mounted dir by taking the longest path first
        grep -i " ${dir}" /proc/mounts | awk '{print $2}' | sort -u -r | xargs umount $lazy && a=10 && lazy=""

        a=$(($a - 1))
        if [ $a -eq 0 ]; then
            echo "clean_mount_points() FAILED!"
            return 1
        fi
    done

    return 0
}

prevent_ctrl_c() {
    case "$1" in
        "on")
            trap '' 2
        ;;
        "off")
            trap 2
        ;;
    esac
}

# Called to clean packages, temporary files and to create the compressed archive
# usually by a "trap cleanup 0" in a script
cleanup() {
    ret=$?

    # This part of the code shall never by breaked by a user
    prevent_ctrl_c on

    clear_trap
    set +e
    last_command=$BASH_COMMAND
    if [ "$ret" != "0" ]; then
        echo "################"
        echo "TRAP TRIGGERED !"
        echo "################"
        echo "$last_command returned $ret"
    fi

    if [ "$ret" = "0" ]; then

        # clear package cache before removing the pkg manager
        clear_packages_cache $dir

        # Verify the IDS are correct
        [ -f "${dir}/usr/sbin/check-ug.py" ] && do_chroot ${dir} /usr/sbin/check-ug.py
        # store role information at the end for nested calls
        echo -e "\nRole ${ROLE}\nVersion ${version}\n" > ${dir}/etc/motd

        if [ ! -d ${dir}/var/lib/edeploy ]; then
            mkdir -p ${dir}/var/lib/edeploy
        fi
        echo -e "VERS=${version}\nROLE=${ROLE}" > ${dir}/var/lib/edeploy/conf

        echo ${ROLE} > ${dir}/etc/hostname
        mkdir -p "$dir/var/lib/edeploy/${version}"

        echo > "${dir}/etc/resolv.conf"

        clean_chroot
        clean_mount_points

    else
        clean_mount_points

        echo "###########"
        echo "END OF TRAP"
        echo "###########"
    fi

    prevent_ctrl_c off
    exit $ret
}

clear_trap() {
    trap - 0
}

mount_fs() {
    [ -d ${dir}/proc ] || mkdir ${dir}/proc
    mount -t proc none ${dir}/proc

    [ -d ${dir}/sys ] && mount -t sysfs -o ro sysfs ${dir}/sys

    # Let's create a copy of the current /dev
    [ -d ${dir}/dev/pts ] || mkdir -p ${dir}/dev/pts
    rsync -aX --delete-before --exclude=shm /dev/ ${dir}/dev/

    [ -d ${dir}/dev/shm ] || mkdir ${dir}/dev/shm
    mount -t tmpfs none ${dir}/dev/shm
}
