#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -e

ORIG=$(cd $(dirname $0); pwd)
. ${ORIG}/third_party_tools

# Check for testing packages
if grep -q testing /etc/yum.repos.d/zuul-built.repo 2> /dev/null; then
    TESTING_URL="$(grep '\/zuul-build\/' /etc/yum.repos.d/zuul-built.repo | cut -d= -f2)"
    ENABLED_REPOS="sftesting,"
fi
if test -f /var/lib/sf/zuul-rpm-build/repodata/repomd.xml; then
    LOCAL_TESTING="/var/lib/sf/zuul-rpm-build"
    ENABLED_REPOS+="sflocal-testing,"
fi

if [ "${USE_SWIFT_CACHE}" == "yes" ]; then
    ENABLED_REPOS+="sfbase,sfextras,sfupdates,sfepel,sfrdo,sfmaster"
    DISABLED_REPOS="*"
    INSTALL_OPTIONS="--disablerepo=${DISABLED_REPOS} --enablerepo=${ENABLED_REPOS}"
    ANSIBLE_EXTRA_VARS="yum_disable_repo=* yum_enable_repo=${ENABLED_REPOS}"
fi

[ -z "$DEBUG" ] || set -x
# Target dir where the centos images will be built
dir="$1"
# Version is SF_VER
version="$2"

dist="centos"
CODENAME_MAJOR=7
ROLE=softwarefactory
export LC_ALL=C
export HOME=/root
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

if [ -z "$ORIG" ]; then
    echo "ORIG env variable must be set to the top dir of the sources" 1>&2
    exit 1
fi

if [ -z "${dir}" ]; then
    echo "dir env variable must be set to the top dir of your destination directory" 1>&2
    exit 1
fi

. ${ORIG}/functions

bootstrap() {
    mount_fs

    # We need to enable the sf-mirror on the build host for bootstrapping
    cat > /etc/yum.repos.d/sf-mirror.repo <<EOF
[sfbase]
name=CentOS-7 - Base
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/base/
gpgcheck=1
enabled=0

[sfextras]
name=CentOS-7 - Extras
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/extras/
gpgcheck=1
enabled=0

[sfupdates]
name=CentOS-7 - Updates
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/updates/
gpgcheck=1
enabled=0
EOF
    mkdir -p ${dir}/etc/pki/rpm-gpg/
    rsync -a --delete ${ORIG}/keys/ ${dir}/etc/pki/rpm-gpg/

    if [ ! -f "${dir}/etc/redhat-release" ]; then
        local release_rpm_url=$(add_main_repository)
        rpm --initdb --root="${dir}"
        rpm -ivh --root "${dir}" $release_rpm_url
    fi

    sed -i 's/$releasever/7/g' ${dir}/etc/yum.repos.d/*

    # Add the SF repo mirror
    cp /etc/yum.repos.d/sf-mirror.repo ${dir}/etc/yum.repos.d/

    cp -f /etc/resolv.conf ${dir}/etc/

    if [ ! -f "${dir}/usr/bin/yum" ]; then
        rpm --root="${dir}" --import $(ls ${dir}/etc/pki/rpm-gpg/*.key | fgrep -v Debug)
        # We cannot use install_packages since the basesystem isn't yet setup
        yum --disableplugin=* --installroot ${dir} ${INSTALL_OPTIONS} install -y basesystem yum shadow-utils yum-plugin-priorities
        echo "/dev/root / ext4 errors=remount-ro 0 1" > ${dir}/etc/fstab
        checkpoint "first bootstrap"
    fi


    cp -p ${ORIG}/edeploy/* ${dir}/usr/sbin/
    cp ${ORIG}/C7.0-ids.tables ${dir}/etc/ids.tables
    fake_shadow_utils

    [ -d "${dir}/var/lib/edeploy/${version}" ] || mkdir -p "${dir}/var/lib/edeploy/${version}"

    rebuild_db ${dir}

    cp ${dir}/etc/skel/.bashrc ${dir}/root
    cp ${dir}/etc/skel/.bash_profile ${dir}/root

    mkdir -p ${dir}/usr/share/edeploy

    echo  'LANG=en_US.UTF-8' > ${dir}/etc/locale.conf

    [ -d ${dir}/etc/dracut.conf.d/ ] || mkdir ${dir}/etc/dracut.conf.d/
    cat > ${dir}/etc/dracut.conf.d/img.conf <<EOF
filesystems+="ext4"
EOF

    cat > ${dir}/etc/sysconfig/network <<EOF
NETWORKING=yes
NOZEROCONF=yes
EOF
    chmod 0644 ${dir}/etc/sysconfig/network
}

enable_selinux() {
    # Force SELinux relabel
    touch ${dir}/.autorelabel

    # TODO: replace "permissive" by "enforcing" once there are no more avc message
    sed -i "s/^SELINUX=.*/SELINUX=permissive/" "${dir}/etc/selinux/config"
}

install_sf_packages() {
    cat > ${dir}/etc/yum.repos.d/sf-repos.repo <<EOF
[sfepel]
name=Extra Packages for Enterprise Linux 7
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/epel/
gpgcheck=1
enabled=0
priority=105
exclude=python2-jenkins-job-builder

[sfrdo]
name=openstack-newton
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/openstack-newton/
gpgcheck=1
enabled=0
exclude=python2-jenkins-job-builder

[sfmaster]
name=SF master packages
baseurl=http://46.231.133.231/kojifiles/repos/${SF_REPO}/
gpgcheck=0
enabled=1
priority=110
EOF
    # Check for testing packages
    if test -n "${TESTING_URL}"; then
        cat >> ${dir}/etc/yum.repos.d/sf-repos.repo << EOF
[sftesting]
name=SF testing packages
baseurl=${TESTING_URL}
gpgcheck=0
enabled=0
priority=2
EOF
    fi
    # Check for local testing packages
    if test -n "${LOCAL_TESTING}"; then
        cat >> ${dir}/etc/yum.repos.d/sf-repos.repo << EOF
[sflocal-testing]
name=SF local testing packages
baseurl=file://${LOCAL_TESTING}/
gpgcheck=0
enabled=0
priority=1
EOF
        mkdir -p "${dir}/${LOCAL_TESTING}"
        rsync -a --delete "${LOCAL_TESTING}/" "${dir}/${LOCAL_TESTING}/"
    fi

    do_chroot ${dir} bash -c 'for key in /etc/pki/rpm-gpg/*.key; do rpm --import $key; done'

    do_chroot ${dir} yum ${INSTALL_OPTIONS} group install -y "Minimal Install"

    # python-virtualenv needed for venv creation
    # mariadb-devel needed for Mysql-Python pip install
    # gcc needed for pycrypto pip install
    # git/patch/tmux/vim-enhanced needed for comfort
    # python-flake8/python-nose needed for test_project_test
    install_packages ${dir} grub2 ansible git patch python-virtualenv mariadb-devel gcc tmux vim-enhanced python-flake8 python-nose

    # Quick and dirty fix for the current issue on RDO 20170223
    install_packages ${dir} python2-passlib-1.6.5

    # install zuul_swift_upload.py
    http_fetch $ZUUL_SWIFT_UPLOAD_URL ${dir}/usr/local/bin/zuul_swift_upload.py
    chmod +x ${dir}/usr/local/bin/zuul_swift_upload.py
}

install_edeploy() {
    cat > ${dir}/etc/rsyncd.conf << EOF
uid = root
gid = root

[install]
path = /var/lib/debootstrap/install
comment = eDeploy install trees

[metadata]
path = /var/lib/debootstrap/metadata
comment = eDeploy metadata
EOF
    cat > ${dir}/var/lib/edeploy/conf << EOF
VERS=${version}
ROLE=softwarefactory
RSERV_PORT=873
RSERV=managesf
EOF
}

install_serverspec() {
    if ! test -d ${dir}/usr/local/share/gems/gems/serverspec-${SERVERSPEC_VERSION}/lib/serverspec; then
        install_packages ${dir} rubygems rubygem-rake
        retry do_chroot ${dir} gem install serverspec -v ${SERVERSPEC_VERSION}
    fi
}

function copy_sf_ansible_roles {
    rsync --delete -a --no-owner ./../config/ansible/ ${dir}/etc/ansible/
}

image_clean() {
    rm -Rf ${dir}/usr/share/info
    rm -Rf ${dir}/share ${dir}/usr/share/backgrounds
    rm -Rf ${dir}/usr/local/share/gems/cache ${dir}/usr/local/share/gems/doc
    rm -Rf ${dir}/root/.cache
    rm -Rf ${dir}/root/.npm
    rm -Rf ${dir}/root/.gem
    rm -Rf ${dir}/root/.rpmdb
}

remove_obsolete() {
    rm -Rf ${dir}/srv/zuul ${dir}/usr/src/zuul ${dir}/var/www/zuul
    rm -Rf ${dir}/srv/storyboard ${dir}/usr/src/storyboard ${dir}/usr/src/python-storyboardclient
    rm -Rf ${dir}/srv/nodepool ${dir}/usr/src/nodepool
    rm -Rf ${dir}/srv/gerritbot ${dir}/usr/src/gerritbot
    rm -Rf ${dir}/srv/lecm ${dir}/usr/src/lecm
    rm -Rf ${dir}/var/www/docs
}

fix_ansible_issue5504() {
    sed -i "s/after=remote_head, //" ${dir}/usr/lib/python2.7/site-packages/ansible/modules/core/source_control/git.py
}

function install_sf {
    set -e

    mkdir -p ${dir}/usr/src

    # Make sure final image use latest ids.tables
    cp ./C7.0-ids.tables ${dir}/etc/ids.tables

    # Disable postfix, NetworkManager and Firewalld
    do_chroot ${dir} systemctl disable postfix NetworkManager firewalld

    # Install ansible playbooks and configuration files
    do_chroot ${dir} mkdir -p /etc/software-factory
    rsync --delete -a --no-owner ./../serverspec/ ${dir}/etc/serverspec/

    # Sf-config
    rsync -a --no-owner ./../config/scripts/ ${dir}/usr/local/bin/
    rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/etc/software-factory/
    rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/usr/local/share/sf-default-config/
    rsync --delete -a --no-owner ./../config/ansible/ ${dir}/etc/ansible/
    mkdir -p ${dir}/etc/software-factory ${dir}/etc/ansible/group_vars ${dir}/var/lib/ansible
    rsync --delete -a --no-owner ./../health-check/ ${dir}/etc/ansible/health-check/

    rsync -a --delete ./../config/config-repo/ ${dir}/usr/local/share/sf-config-repo/
    rsync -a --delete ./../tools/slaves/ ${dir}/usr/local/share/sf-jenkins-slave-tools/

    do_chroot ${dir} find /root /var/www /srv/ -name "*.pyc" -exec rm {} \;

    # Deactivate default disabling of root ssh access of cloud-init
    sed -i 's/disable_root:.*/disable_root: 0/' ${dir}/etc/cloud/cloud.cfg

    # Set a default password. This is needed when image is booted when metadata servers
    # are not available. Cloudinit will deactivate root auth by password.
    do_chroot ${dir} bash -c "passwd -d root"
    # Be sure sshd disallow authentication by password (only allowed by key)
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' ${dir}/etc/ssh/sshd_config
}

START=$(date '+%s')
function checkpoint {
    set +x
    NOW=$(date '+%s')
    ELAPSED=$(python -c "print('%03.2fmin' % (($NOW - $START) / 60.0))")
    echo "(STEP1) $ELAPSED - $*"
    START=$(date '+%s')
    [ -z "${DEBUG}" ] || set -x
}

trap cleanup 0

if [ -z "${dir}" ]; then
    fatal_error "dir variable is not set ! Exiting"
fi

check_binary yum
check_binary rpm

build_all() {
    bootstrap
    checkpoint "bootstrapped"
    install_sf_packages
    fix_ansible_issue5504
    checkpoint "sf dep packages installed"
    enable_selinux
    checkpoint "selinux configured"
    install_edeploy
    install_serverspec
    checkpoint "edeploy, serverspect installed"
    remove_obsolete
    copy_sf_ansible_roles
    ansible_install sf-base
    ansible_install sf-install-server
    ansible_install sf-mysql
    ansible_install sf-gateway
    ansible_install sf-jenkins "$JENKINS_EXTRA_VARS"
    ansible_install sf-managesf
    ansible_install sf-cauth "$CAUTH_EXTRA_VARS"
    ansible_install sf-lecm
    ansible_install sf-zuul
    ansible_install sf-lodgeit
    ansible_install sf-murmur
    ansible_install sf-etherpad "$ETHERPAD_EXTRA_VARS"
    ansible_install sf-gerrit
    ansible_install sf-gerritbot
    ansible_install sf-gitweb
    ansible_install sf-nodepool
    ansible_install sf-storyboard
    ansible_install sf-storyboard-webclient "${STORYBOARD_WEBCLIENT_EXTRA_VARS}"
    ansible_install sf-mirror "${MIRROR2SWIFT_EXTRA_VARS}"
    ansible_install sf-elasticsearch "${ELASTICSEARCH_EXTRA_VARS}"
    ansible_install sf-logstash "${LOGSTASH_EXTRA_VARS}"
    ansible_install sf-kibana "${KIBANA_EXTRA_VARS}"
    ansible_install sf-grafana "${GRAFANA_EXTRA_VARS}"
    ansible_install sf-rabbitmq
    ansible_install sf-job-logs-gearman-client
    ansible_install sf-job-logs-gearman-worker
    ansible_install sf-repoxplorer
    ansible_install sf-mosquitto
    ansible_install sf-germqtt
    ansible_install sf-ochlero
    ansible_install sf-collectd
    ansible_install sf-influxdb "${INFLUXDB_EXTRA_VARS}"
    install_sf
    checkpoint "sf installed"
    do_chroot ${dir} yum update -y ${INSTALL_OPTIONS} --exclude="python2-passlib jenkins"
    do_chroot ${dir} yum update -y --disablerepo=* --enablerepo=grafana,logstash,kibana,elastic
    checkpoint "image final update"
    image_clean
    checkpoint "image cleaned"
    put_git_mark ${dir}
}

build_all
